apiVersion: scaffolder.backstage.io/v1beta3
# https://backstage.io/docs/features/software-catalog/descriptor-format#kind-template
kind: Template
metadata:
  name: example-nodejs-template-copy
  title: Example Node.js Template (COPY)
  description: An example template for the scaffolder that creates a simple Node.js service
spec:
  owner: user:guest
  type: service

  parameters:
    - title: Informações do projeto
      required:
        - name
      properties:
        name:
          title: Nome
          type: string
          description: Nome exlusivo do componente
      
    - title: Escolha a localização
      required:
        - host
        - groupPath
        - repoName
      properties:
        host:
          title: Host GitLab
          type: string
          description: Selecione o host GitLab onde o repositório será criado
          enum:
            - gitlab.com
            - projetos.tce.rn.gov.br
          default: projetos.tce.rn.gov.br
    
        groupPath:
          title: Caminho do grupo / subgrupo
          type: string
          description: Caminho do grupo ou subgrupo onde o repositório ficará
          pattern: "^[A-Za-z0-9._-]+(/[A-Za-z0-9._-]+)*$"
          ui:placeholder: projetos/aka
    
        repoName:
          title: Nome do repositório
          type: string
          description: Nome do novo repositório 
          pattern: '^[a-z0-9-]+$'
          ui:autofocus: true
  # These steps are executed in the scaffolder backend, using data that we gathered
  # via the parameters above.
  steps:
    # Each step executes an action, in this case one templates files into the working directory.
    - id: fetch-base
      name: Fetch Base
      action: fetch:cookiecutter
      input:
        url: ./content
        values: 
          project_name: ${{ parameters.name }}

    - id: gitlabGroup
      name: Garantir Grupo
      action: gitlab:group:ensureExists
      input:
        repoUrl: ${{ parameters.host }}/${
          { parameters.groupPath }}
        path: ${{ parameters.groupPath.split('/') }}

    # This step publishes the contents of the working directory to GitHub.
    # If you or your organization prefer another default branch name over 'main'
    # you can change that here.
    - id: publish
      name: Publish
      action: publish:gitlab
      input:
        repoUrl: ${{ parameters.host }}?owner=${{ parameters.groupPath }}&repo=${{ parameters.repoName }}
        defaultBranch: main

    # The final step is to register our new component in the catalog.
    - id: register
      name: Register
      action: catalog:register
      input:
        repoContentsUrl: ${{ steps['publish'].output.repoContentsUrl }}
        catalogInfoPath: '/catalog-info.yaml'

    # Let's notify the user that the template has completed using the Notification action
    - id: notify
      name: Notify
      action: notification:send
      input:
        recipients: entity
        entityRefs:
          - user:default/guest
        title: 'Template executed'
        info: 'Your template has been executed'
        severity: 'normal'

  # Outputs are displayed to the user after a successful execution of the template.
  output:
    links:
      - title: Repository
        url: ${{ steps['publish'].output.remoteUrl }}
      - title: Open in catalog
        icon: catalog
        entityRef: ${{ steps['register'].output.entityRef }}